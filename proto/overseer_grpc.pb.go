// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: overseer.proto

package overseer_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	OverseerService_RegisterTask_FullMethodName = "/overseer.OverseerService/RegisterTask"
)

// OverseerServiceClient is the client API for OverseerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OverseerServiceClient interface {
	RegisterTask(ctx context.Context, in *RegisterTaskRequest, opts ...grpc.CallOption) (*RegisterTaskResponse, error)
}

type overseerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOverseerServiceClient(cc grpc.ClientConnInterface) OverseerServiceClient {
	return &overseerServiceClient{cc}
}

func (c *overseerServiceClient) RegisterTask(ctx context.Context, in *RegisterTaskRequest, opts ...grpc.CallOption) (*RegisterTaskResponse, error) {
	out := new(RegisterTaskResponse)
	err := c.cc.Invoke(ctx, OverseerService_RegisterTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OverseerServiceServer is the server API for OverseerService service.
// All implementations should embed UnimplementedOverseerServiceServer
// for forward compatibility
type OverseerServiceServer interface {
	RegisterTask(context.Context, *RegisterTaskRequest) (*RegisterTaskResponse, error)
}

// UnimplementedOverseerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOverseerServiceServer struct {
}

func (UnimplementedOverseerServiceServer) RegisterTask(context.Context, *RegisterTaskRequest) (*RegisterTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterTask not implemented")
}

// UnsafeOverseerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OverseerServiceServer will
// result in compilation errors.
type UnsafeOverseerServiceServer interface {
	mustEmbedUnimplementedOverseerServiceServer()
}

func RegisterOverseerServiceServer(s grpc.ServiceRegistrar, srv OverseerServiceServer) {
	s.RegisterService(&OverseerService_ServiceDesc, srv)
}

func _OverseerService_RegisterTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverseerServiceServer).RegisterTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OverseerService_RegisterTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverseerServiceServer).RegisterTask(ctx, req.(*RegisterTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OverseerService_ServiceDesc is the grpc.ServiceDesc for OverseerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OverseerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "overseer.OverseerService",
	HandlerType: (*OverseerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterTask",
			Handler:    _OverseerService_RegisterTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "overseer.proto",
}

const (
	OverseerClient_Overseer_FullMethodName = "/overseer.OverseerClient/Overseer"
)

// OverseerClientClient is the client API for OverseerClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OverseerClientClient interface {
	Overseer(ctx context.Context, in *OverseerRequest, opts ...grpc.CallOption) (*OverseerResponse, error)
}

type overseerClientClient struct {
	cc grpc.ClientConnInterface
}

func NewOverseerClientClient(cc grpc.ClientConnInterface) OverseerClientClient {
	return &overseerClientClient{cc}
}

func (c *overseerClientClient) Overseer(ctx context.Context, in *OverseerRequest, opts ...grpc.CallOption) (*OverseerResponse, error) {
	out := new(OverseerResponse)
	err := c.cc.Invoke(ctx, OverseerClient_Overseer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OverseerClientServer is the server API for OverseerClient service.
// All implementations should embed UnimplementedOverseerClientServer
// for forward compatibility
type OverseerClientServer interface {
	Overseer(context.Context, *OverseerRequest) (*OverseerResponse, error)
}

// UnimplementedOverseerClientServer should be embedded to have forward compatible implementations.
type UnimplementedOverseerClientServer struct {
}

func (UnimplementedOverseerClientServer) Overseer(context.Context, *OverseerRequest) (*OverseerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Overseer not implemented")
}

// UnsafeOverseerClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OverseerClientServer will
// result in compilation errors.
type UnsafeOverseerClientServer interface {
	mustEmbedUnimplementedOverseerClientServer()
}

func RegisterOverseerClientServer(s grpc.ServiceRegistrar, srv OverseerClientServer) {
	s.RegisterService(&OverseerClient_ServiceDesc, srv)
}

func _OverseerClient_Overseer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverseerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverseerClientServer).Overseer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OverseerClient_Overseer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverseerClientServer).Overseer(ctx, req.(*OverseerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OverseerClient_ServiceDesc is the grpc.ServiceDesc for OverseerClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OverseerClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "overseer.OverseerClient",
	HandlerType: (*OverseerClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Overseer",
			Handler:    _OverseerClient_Overseer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "overseer.proto",
}
